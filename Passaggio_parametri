Per passare i parametri ad una funzione scritta in assembler Z80, Hi-tech C prevede una procedura che
a prima vista può apparire complessa ma come vedremo molto efficiente.
Da come si vede nel manuale i parametri sono passati nello stack al di sopra dell'indirizzo di ritorno:

|               |
|       .       |
|       .       |
|   argomenti   |
|    per la     |
|   funzione    |
|---------------|
|      ix       |
|---------------|
| indirizzo di  |
|   ritorno     |
*---------------*   <--- stack pointer

Quando una funzione in assembler è invocata dal programma in linguaggio C gli argomenti sono messi nello stack in ordine
inverso. Abbiamo cioè che il primo argomento è nell'indirizzo di memoria più basso. Lo stesso accade per una routine in
linguaggio C invocata da un programma in assembler.
Nel caso di un solo parametro floating point, abbiamo:
			------------
			*   segno   *	1 bit
			*-----------*
			* esponente *	7 bit
			*-----------*
			* mantissa  *	24 bit normalizzato
                        -------------
 Il numero e' memorizzato con il segno nel byte piu' alto e la mantissa nel byte piu' basso.
 Per raccogliere il parametro dobbiamo usare il puntatore ix aggiornato con il puntatore stack più un offset.
 L'offset, rispetto allo stack pointer, da adottare vale 6 (2 byte per indirizzo di ritorno e 2 byte per ix)
 e altri 2 per il primo push che salva l'indice ix:
 
 	psect	text, global
 	global	_programma, prg1, prg2
 
 	arg     equ     6       ; offeset primo argomento
_programma:
 		push	ix
		ld		ix,0
		add		ix,sp		; punta all'argomento
		                      		; carica l'argomento in HLDE
		ld		l,(ix+arg+0)    ; byte alto mantissa
		ld		h,(ix+arg+1)	; segno + esponente
		ld		e,(ix+arg+2)    ; byte medio mantissa
		ld		d,(ix+arg+3)    ; byte basso mantissa
     ....
 Il ritorno del risultato della elaborazione è in HL DE.
 
 Nel caso di tipo word il valore torna in HL, long word in HL DE con la parte alta in HL.
 Gli interi sono in L col segno eventuale in H. 
 I puntatore a carattere occupano 2 byte e sono caricati in HL, ad esempio vediamo un modulo
 che riceve un * char nel quale scrive '0', '1', il terminatore di stringa '\0' e ritorna 
 in HL il puntatore al vettore ricevuto:
 
  	psect	text, global
 	global	_stringa, prg1, prg2
 
 		arg     equ     6       ; offeset primo argomento
_stringa:
  		push	ix
		ld	ix,0
		add	ix,sp		; punta all'argomento
		ld	l,(ix+arg+0)    ; byte alto indirizzo
		ld	h,(ix+arg+1)	; byte basso indirizzo
		
		ld	(hl), 48	; '0'
		inc	hl
		ld	(hl), 49	; '1'
		inc	hl
		ld	(hl), 0		; terminatore di stringa
		dec	hl
		dec	hl		; punta al primo carattere
		ld	sp, ix
		pop	ix
		ret
		
 
 
