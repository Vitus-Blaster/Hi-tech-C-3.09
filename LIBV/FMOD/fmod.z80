; double fmod(double z, double x)
; return the remainder of the division of z by x
;
; fmod(z,x) = z - x * floor(z/x)
; if x > 0 then  0 <= fmod (z,x) <  x
; if x < 0 then -x <  fmod (z,x) <= 0
;
; Format of a floating point number as set by Hi-tech
;             ------------
;            *   sign    *    1 bit
;            *-----------*
;            * exponent  *    7 bits
;            *-----------*
;            * mantissa  *    24 bits normalized
;             -----------
; The number is stored with the sign in the highest byte and
; the mantissa in the three lowest bytes

        psect    text, global
        global    _fmod, flsub, flmul, fldiv, fladd, fpnorm, _floor

        arg     equ     6        ; offeset first argument
_fmod:
        push    iy               ; procedure for input parameters
        push    ix
        ld      ix,0
        add     ix,sp            ; point to argument

        ld      a, 00h           ;
        ld      (flagz), a       ; flagz contains initial value 0
                                
                                 ; load first argument (Z) in HL DE
        ld      e,(ix+arg+0)     ; mantissa Low byte
        ld      d,(ix+arg+1)     ; mantissa Middle byte
        ld      l,(ix+arg+2)     ; mantissa High byte
        ld      h,(ix+arg+3)     ; sign + exponent

        call    fpnorm           ; normalizes it

        ld      a, l             ; check if mantissa is 0
        or      d                ; i.e. L D and E contains zeros
        or      e
        jp      z, numzero       ; yes, ends with zero result
        
                                 ; test if z is negative       
        bit     7, h             ; 1 = negative sign, 0 = positive sign
        jp      z, avanti        ; if bit7=0 then flag z=1 and skip forward

				 ; bit7 = 1
        ld      a, 01h           ; update the flag
        ld      (flagz), a       ; of Z was negative
        res     7, h             ; Z becomes positive
avanti:
        ld      (memz), de       ; save Z
        ld      (memz+2), hl

                                 ; load the second argument (X) in HL DE
        ld      e,(ix+arg+4)     ; Low mantissa byte
        ld      d,(ix+arg+5)     ; Middle mantissa bytes
        ld      l,(ix+arg+6)     ; High mantissa bytes
        ld      h,(ix+arg+7)     ; sign + exponent

        call    fpnorm           ; normalizes it
	
        ld      a, l             ; check if mantissa is 0
        or      d                ; i.e. L D and E contains zeros
        or      e
        jp      z, denzero       ; yes, ends with zero result
        
        res     7, h             ; we make X positive in any way
        ld      (memx), de       ; save X
        ld      (memx+2), hl

        push    hl               ; push X in the stack
        push    de
        

; Library float division. The HL number of (Z) is divided
; with the number that resides in the stack (X) below the address return.
; The pointer to the stack returns correct and the result is in HL DE.
; See the source round in float.as
;       (z / x )

        ld      de, (memz)
        ld      hl, (memz+2)
        call    fldiv
    
; Rounds the number in HL DE to the bottom unit
; floor.C is in libf.lib: double floor (double)
;            floor( z / x )

        push    hl               ; pass the argument to the routine
        push    de               ; via stack
        call    _floor           ; floor(.)
                                 ; returns the result in HL DE
;
;    Moltiplicazione floating point. Il numero in HL DE e'
;    moltiplicato con il numero che risiede nello stack sotto
;    all'indirizzo di ritorno.
;    Il puntatore allo stack torna corretto e il risultato C( in HL DE.
;    Vedere il sorgente in flmul in float.as
;            x * floor( z / x )

        push    hl               ; save floor(z/x)
        push    de               ; in the stack

        ld      de, (memx)       ; retrieves  X
        ld      hl, (memx+2)

        call    flmul            ; result in HL DE

; Floating point multiplication. The number in HL DE is multiplied by the number 
; that resides in the stack below to the return address.
; The pointer to the stack returns correct and the result C (in HL DE.
; See the source in flmul in float.as
;           z - x * floor( z / x )

        push    hl               ; save x * floor (z / x)
        push    de               ; in the stack

        ld      de, (memz)       ; retrieves Z
        ld      hl, (memz+2)

        call    flsub
                                 ; in HL DE we have the result of fmod
        jp      fine1            ; now go to the sign control part
denzero:                         ; if denominator is equal to zero
        ld      de, (over)       ; puts the value of
        ld      hl, (over+2)     ; maximum floating point
        jp      fine             ; ritorno in HL DE
numzero:
        ld      de, (zero)       ; mette il valore
        ld      hl, (zero+2)     ; floating point massimo
        jp      fine             ; return of HL DE
;    --------------------
;    | Z | X | operation |
;    --------------------
;    | 0 | 0 |  res 7, h |
;    --------------------
;    | 0 | 1 |  res 7, h |  
;    --------------------
;    | 1 | 1 |  set 7, h |
;    --------------------
;    | 1 | 0 |  set 7, h |
;    --------------------
;    We note that the sign of the result is given by the sign of Z:
:    Z positive positive result
;    Z negative negative result     
fine1:
        ld      a, (flagz)       ;
        or      a                ;
        jp      nz, zneg         ; flagz = 1 then Z negative and skip
        res     7, h             ; otherwise positive
fine:
        ld      sp,ix            ; exit procedure
        pop     ix
        pop     iy
        ret
zneg:
        set     7, h             ; first argument was negative
        jp      fine
flagz:  defb    0                ;
memz:   deff    0.0              ;
memx:   deff    0.0              ;
over:   deff    1.6777217e07     ; infinite
zero:   deff    0.0              ;
